// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Score.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Yugege {

  #region Messages
  public sealed class MyScore : pb::IMessage {
    private static readonly pb::MessageParser<MyScore> _parser = new pb::MessageParser<MyScore>(() => new MyScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyScore> Parser { get { return _parser; } }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private string score_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Score {
      get { return score_; }
      set {
        score_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Score = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class OtherScore : pb::IMessage {
    private static readonly pb::MessageParser<OtherScore> _parser = new pb::MessageParser<OtherScore>(() => new OtherScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherScore> Parser { get { return _parser; } }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private string score_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Score {
      get { return score_; }
      set {
        score_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Score = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class OtherShengChang : pb::IMessage {
    private static readonly pb::MessageParser<OtherShengChang> _parser = new pb::MessageParser<OtherShengChang>(() => new OtherShengChang());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherShengChang> Parser { get { return _parser; } }

    /// <summary>Field number for the "shengchang" field.</summary>
    public const int ShengchangFieldNumber = 1;
    private string shengchang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shengchang {
      get { return shengchang_; }
      set {
        shengchang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Shengchang.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Shengchang);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shengchang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shengchang);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Shengchang = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class MyShengChang : pb::IMessage {
    private static readonly pb::MessageParser<MyShengChang> _parser = new pb::MessageParser<MyShengChang>(() => new MyShengChang());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyShengChang> Parser { get { return _parser; } }

    /// <summary>Field number for the "shengchang" field.</summary>
    public const int ShengchangFieldNumber = 1;
    private string shengchang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shengchang {
      get { return shengchang_; }
      set {
        shengchang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Shengchang.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Shengchang);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shengchang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shengchang);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Shengchang = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
